{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Template de Entrega","text":"Bottlenecks Realizados <ul> <li>Grafana</li> <li>Prometeus</li> <li>Redis</li> </ul>"},{"location":"#aluno","title":"Aluno","text":"<ol> <li>Jo\u00e3o Sarti</li> </ol> <p>Instru\u00e7\u00f5es</p> <p>Esta \u00e9 minha entrega do trabalho individual da materia de microservi\u00e7os e APIs do 5 semestre de Ci\u00eancia da Computa\u00e7\u00e3o. Os k8s.yaml de cada microservi\u00e7o e dos checkpoints estar\u00e3o em suas abas separadas, na homepage deixarei apenas o compose (que \u00e9 utilizado inicialmente e posteriormente deixado de lado).  </p> <p>Para executar os c\u00f3digos local ou globalmente, siga as instru\u00e7\u00f5es do README.md</p>"},{"location":"#entregas","title":"Entregas","text":"<ul> <li> Exchange API - Data 02/06/2025</li> <li> Product API - Data 02/06/2025</li> <li> Order API - Data 02/06/2025</li> <li> Jenkins - Data 03/06/2025</li> <li> MiniKube - Data 03/06/2025</li> <li> Bottlenecks - Data 03/06/2025</li> </ul>"},{"location":"#diagramas","title":"Diagramas","text":"<pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; auth\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        auth --&gt; account\n        gateway --&gt; exchange\n        gateway --&gt; product\n        gateway --&gt; order:::red\n        product --&gt; db\n        order --&gt; db\n        order --&gt; product\n        %% Redis caching for product\n        product e2@==&gt; redis[(Redis Cache)]\n    end\n\n    %% Monitoring\n    grafana[\"Grafana + Prometheus\"]\n    grafana e3@-.-&gt; gateway\n\n    %% External API and internet\n    exchange --&gt; 3partyapi@{label: \"3rd-party API\"}\n    internet e1@==&gt;|request| gateway\n\n    %% Animations\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n\n    %% Styles and links\n    classDef red fill:#fcc\n    click order \"#order-api\" \"Order API\"</code></pre>"},{"location":"#codigos-gerais","title":"C\u00f3digos Gerais","text":"Estrutura de pastas geral do projetoDocker Compose (para os exercicios 1-3) Diagrama de Pastas<pre><code>API/ (Inexistente em um cenario real, apenas para organizar no github e testes locais)\n\u251c\u2500\u2500 exchange-service/ (Microservi\u00e7o independente)\n\u2502   \u251c\u2500\u2500 app/\n\u2502   \u2502   \u251c\u2500\u2500 main.py\n\u2502   \u2502   \u2514\u2500\u2500 routers.py\n\u2502   \u251c\u2500\u2500 k8s/\n\u2502   \u2502   \u2514\u2500\u2500 k8s.yaml\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 Jenkinsfile\n\u2502   \u251c\u2500\u2500 uvicorn.sh\n\u2502   \u2514\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 k8s (Kubernets da infra-estrutura)\n\u2502   \u251c\u2500\u2500 db.yaml\n\u2502   \u251c\u2500\u2500 grafana.yaml\n\u2502   \u251c\u2500\u2500 prometheus-config.yaml\n\u2502   \u251c\u2500\u2500 prometheus.yaml\n\u2502   \u2514\u2500\u2500 redis.yaml\n\u251c\u2500\u2500 gateway-service/ (Microservi\u00e7o independente)\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u2514\u2500\u2500 main/\n\u2502   \u2502       \u251c\u2500\u2500 java/...\n\u2502   \u2502       \u2514\u2500\u2500 resources/\n\u2502   \u2502           \u251c\u2500\u2500 application.yml\n\u2502   \u2502           \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 k8s/\n\u2502   \u2502   \u2514\u2500\u2500 k8s.yaml\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 Jenkinsfile\n\u2502   \u2514\u2500\u2500 pom.xml\n\u251c\u2500\u2500 order/ (Dependencia do microservi\u00e7o)\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u2514\u2500\u2500 main/\n\u2502   \u2502       \u2514\u2500\u2500 java/...\n\u2502   \u2514\u2500\u2500 pom.xml\n\u251c\u2500\u2500 order-service/ (Microservi\u00e7o independente)\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u2514\u2500\u2500 main/\n\u2502   \u2502       \u251c\u2500\u2500 java/...\n\u2502   \u2502       \u2514\u2500\u2500 resources/\n\u2502   \u2502           \u251c\u2500\u2500 application.yml\n\u2502   \u2502           \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 k8s/\n\u2502   \u2502   \u2514\u2500\u2500 k8s.yaml\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 Jenkinsfile\n\u2502   \u2514\u2500\u2500 pom.xml\n\u251c\u2500\u2500 product/ (Dependencia do microservi\u00e7o)\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u2514\u2500\u2500 main/\n\u2502   \u2502       \u2514\u2500\u2500 java/...\n\u2502   \u2514\u2500\u2500 pom.xml\n\u251c\u2500\u2500 product-service/ (Microservi\u00e7o independente)\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u2514\u2500\u2500 main/\n\u2502   \u2502       \u251c\u2500\u2500 java/...\n\u2502   \u2502       \u2514\u2500\u2500 resources/\n\u2502   \u2502           \u251c\u2500\u2500 application.yml\n\u2502   \u2502           \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 k8s/\n\u2502   \u2502   \u2514\u2500\u2500 k8s.yaml\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 Jenkinsfile\n\u2502   \u2514\u2500\u2500 pom.xml\n\u251c\u2500\u2500 account/ (Dependencia do microservi\u00e7o)\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u2514\u2500\u2500 main/\n\u2502   \u2502       \u2514\u2500\u2500 java/...\n\u2502   \u2514\u2500\u2500 pom.xml\n\u251c\u2500\u2500 account-service/ (Microservi\u00e7o independente)\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u2514\u2500\u2500 main/\n\u2502   \u2502       \u251c\u2500\u2500 java/...\n\u2502   \u2502       \u2514\u2500\u2500 resources/\n\u2502   \u2502           \u251c\u2500\u2500 application.yml\n\u2502   \u2502           \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 k8s/\n\u2502   \u2502   \u2514\u2500\u2500 k8s.yaml\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 Jenkinsfile\n\u2502   \u2514\u2500\u2500 pom.xml\n\u251c\u2500\u2500 auth/ (Dependencia do microservi\u00e7o)\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u2514\u2500\u2500 main/\n\u2502   \u2502       \u2514\u2500\u2500 java/...\n\u2502   \u2514\u2500\u2500 pom.xml\n\u251c\u2500\u2500 auth-service/ (Microservi\u00e7o independente)\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u2514\u2500\u2500 main/\n\u2502   \u2502       \u251c\u2500\u2500 java/...\n\u2502   \u2502       \u2514\u2500\u2500 resources/\n\u2502   \u2502           \u251c\u2500\u2500 application.yml\n\u2502   \u2502           \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 k8s/\n\u2502   \u2502   \u2514\u2500\u2500 k8s.yaml\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 Jenkinsfile\n\u2502   \u2514\u2500\u2500 pom.xml\n</code></pre> api/compose.yaml<pre><code># compose.yaml\nservices:\ndb:\n    image: postgres:latest\n    hostname: db\n    environment:\n    POSTGRES_DB: ${POSTGRES_DB:-store}\n    POSTGRES_USER: ${POSTGRES_USER:-store}\n    POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-store}\n    volumes:\n    - postgres-data:/var/lib/postgresql/data\n    networks:\n    - store-project\n\nexchange:\n    build:\n    context: ./exchange-service\n    dockerfile: Dockerfile\n    networks:\n    - store-project\n\naccount:\n    hostname: account\n    build:\n    context: ./account-service\n    dockerfile: Dockerfile\n    environment:\n    DATABASE_HOST: db\n    DATABASE_USER: ${POSTGRES_USER:-store}\n    DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-store}\n    depends_on:\n    - db\n    networks:\n    - store-project\n\nauth:\n    hostname: auth\n    build:\n    context: ./auth-service\n    dockerfile: Dockerfile\n    environment:\n    JWT_SECRET_KEY: ${JWT_SECRET_KEY:-yrBBgYlvJQeslzFlgX9MFZccToI2fjRFqualquercoisa}\n    networks:\n    - store-project\n\ngateway:\n    hostname: gateway\n    build:\n    context: ./gateway-service\n    dockerfile: Dockerfile\n    environment:\n    - LOGGING_LEVEL_STORE=${LOGGING_LEVEL_STORE:-debug}\n    ports:\n    - 8080:8080\n    depends_on:\n    - account\n    - auth\n    - product\n    - order\n    - exchange\n    networks:\n    - store-project\n\nproduct:\n    hostname: product\n    build:\n    context: ./product-service\n    dockerfile: Dockerfile\n    environment:\n    DATABASE_HOST: db\n    DATABASE_USER: ${POSTGRES_USER:-store}\n    DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-store}\n    REDIS_HOST: redis\n    depends_on:\n    - db\n    - redis\n    networks:\n    - store-project\n\norder:\n    hostname: order\n    build:\n    context: ./order-service\n    dockerfile: Dockerfile\n    environment:\n    DATABASE_HOST: db\n    DATABASE_USER: ${POSTGRES_USER:-store}\n    DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-store}\n    depends_on:\n    - db\n    networks:\n    - store-project\n\nprometheus:\n    image: prom/prometheus:latest\n    hostname: prometheus\n    ports:\n    - 9090:9090\n    volumes:\n    - prometheus-config:/etc/prometheus\n    networks:\n    - store-project\n\ngrafana:\n    image: grafana/grafana-enterprise\n    hostname: grafana\n    ports:\n    - 3000:3000\n    environment:\n    - GF_SECURITY_ADMIN_PASSWORD=admin\n    user: \"472\"\n    volumes:\n    - grafana-data:/var/lib/grafana\n    - grafana-provisioning:/etc/grafana/provisioning/datasources\n    depends_on:\n    - prometheus\n    networks:\n    - store-project\n\nredis:\n    image: redis:latest\n    hostname: redis\n    ports:\n    - 6379:6379\n    networks:\n    - store-project\n\nvolumes:\npostgres-data:\nprometheus-config:\ngrafana-data:\ngrafana-provisioning:\n\nnetworks:\nstore-project:\n    driver: bridge\n</code></pre> <p>Todas as variaveis de ambiente utilizadas est\u00e3o disponiveis no .env deste reposit\u00f3rio, que foi fornecido pelo professor</p>"},{"location":"#exemplo-de-video","title":"Exemplo de v\u00eddeo","text":"<p>Video com exemplo do projeto sendo executado em minikube e testando as rotas e autentica\u00e7\u00e3o</p>"},{"location":"#link-caso-o-video-nao-carregue","title":"Link caso o video n\u00e3o carregue:","text":"<p>https://www.youtube.com/watch?v=jRRyDczod_4</p>"},{"location":"#referencias","title":"Refer\u00eancias","text":"<p>Material for MkDocs</p>"},{"location":"bottlenecks/main/","title":"Bottlenecks Aplicados","text":""},{"location":"bottlenecks/main/#prometheus-grafana","title":"Prometheus + Grafana","text":"<p>Utilizamos o prometheus e o grafana para monitorar os status da aplica\u00e7\u00e3o</p> Grafana k8sPrometheus k8sPrometheus k8s config grafana.yaml<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: grafana\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: grafana\n  template:\n    metadata:\n      labels:\n        app: grafana\n    spec:\n      containers:\n      - name: grafana\n        image: grafana/grafana-enterprise\n        ports:\n        - containerPort: 3000\n        env:\n        - name: GF_SECURITY_ADMIN_PASSWORD\n          value: \"admin\"\n        volumeMounts:\n        - name: grafana-storage\n          mountPath: /var/lib/grafana\n      volumes:\n      - name: grafana-storage\n        emptyDir: {}\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: grafana\nspec:\n  selector:\n    app: grafana\n  ports:\n  - protocol: TCP\n    port: 3000\n    targetPort: 3000\n  type: NodePort\n</code></pre> prometheus.yaml<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: prometheus\n  template:\n    metadata:\n      labels:\n        app: prometheus\n    spec:\n      containers:\n      - name: prometheus\n        image: prom/prometheus:latest\n        ports:\n        - containerPort: 9090\n        volumeMounts:\n        - name: config-volume\n          mountPath: /etc/prometheus/\n      volumes:\n      - name: config-volume\n        configMap:\n          name: prometheus-config\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: prometheus\nspec:\n  selector:\n    app: prometheus\n  ports:\n  - protocol: TCP\n    port: 9090\n    targetPort: 9090\n  type: NodePort\n</code></pre> prometheus-config.yaml<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: prometheus-config\ndata:\n  prometheus.yml: |\n    global:\n      scrape_interval: 15s\n\n    scrape_configs:\n      - job_name: 'prometheus'\n        static_configs:\n          - targets: ['localhost:9090']\n\n      - job_name: 'gateway'\n        static_configs:\n          - targets: ['gateway:8080']\n</code></pre>"},{"location":"bottlenecks/main/#redis","title":"Redis","text":"<p>Redis foi utilizado na aplica\u00e7\u00e3o Product para fazer o caching de produtos para aumentar a resposta na rota get/product/{id}</p> redis k8s redis.yaml<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:latest\n        ports:\n        - containerPort: 6379\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: redis\nspec:\n  selector:\n    app: redis\n  ports:\n  - protocol: TCP\n    port: 6379\n    targetPort: 6379\n  type: ClusterIP\n</code></pre> <p> </p>"},{"location":"exercicio1/main/","title":"Exercicio 1","text":""},{"location":"exercicio1/main/#objetivo","title":"Objetivo","text":"<p>Fazer um microservi\u00e7o de exchange para nossa api que fa\u00e7a requisi\u00e7\u00e3o para um servi\u00e7o terceiro utilizando python e fastAPI</p>"},{"location":"exercicio1/main/#montagem-do-exercicio","title":"Montagem do Exercicio","text":"<p>Para a realiza\u00e7ao deste exercicio, precisamos primeiro criar nossa aplica\u00e7\u00e3o e testa-la, uma vez funcionando adicionamos ao compose da API</p>"},{"location":"exercicio1/main/#criacao-exercicio","title":"Cria\u00e7\u00e3o Exercicio","text":"<p>Clone o reposit\u00f3rio com o exercicio pronto para ver a estrutura de arquivos escolhida, mas ela se resume em uma pasta \"app\" com todos os arquivos .py, sendo eles o main.py e um routers.py com nossas rotas e seus c\u00f3digos respectivos.</p> main.pyrouters.py main.py<pre><code>#main.py\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom routers import router\n\napp = FastAPI()\napp.include_router(router)\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n    allow_credentials=True,\n)\n\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"Exchange microservice is up!\"}\n</code></pre> routers.py<pre><code># routers.py\nfrom fastapi import APIRouter, HTTPException, Request, Depends\nimport requests\nfrom typing import Optional\n\nrouter = APIRouter(\n    prefix=\"/exchange\",\n    tags=[\"exchange\"]\n)\n\nAPI_URL = \"https://economia.awesomeapi.com.br/json/last/\"\n\n###################################\n##### Routers Functions Below #####\n###################################\n\n#Default function, change as needed\n@router.get(\"\")\nasync def root_func():\n    return {\"message\": \"Root function ran!\"}\n\n@router.get(\"/{currency1}/{currency2}\", status_code=200)\nasync def convert_currency(currency1: str, currency2: str):\n    try:\n        exchange_rate = requests.get(API_URL + f\"{currency1}-{currency2}\")\n        if not exchange_rate:\n            raise HTTPException(400, detail=\"Erro ao realizar request de exchange\")\n        if exchange_rate.status_code != 200:\n            raise HTTPException(status_code=exchange_rate.status_code, detail=exchange_rate.json().get(\"detail\"))\n\n        exchange_rate = exchange_rate.json()[f\"{currency1}{currency2}\"]\n        response = {\n            \"sell\": exchange_rate[\"high\"],\n            \"buy\": exchange_rate[\"low\"],\n            \"date\": exchange_rate[\"create_date\"],\n        }\n        return response\n\n\n    except HTTPException as e:\n        raise e\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))\n</code></pre>"},{"location":"exercicio1/main/#criacao-dockerfile","title":"Cria\u00e7\u00e3o dockerfile","text":"<p>Para este dockerfile ser adequado com o fast-api, utilizamos um script uvicorn.sh para iniciar a instancia de python corretamente e um requirements.txt com todas as dependencias necessarias.</p> dockerfileuvicorn.shrequirements.txt dockerfile<pre><code>FROM python:3.12-slim\nWORKDIR /exchange\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY . .\nRUN chmod +x ./uvicorn.sh\nENV PYTHONPATH=/exchange/app\nCMD [\"/bin/bash\", \"./uvicorn.sh\"]\n</code></pre> uvicorn.sh<pre><code>#!/bin/bash\nexec uvicorn app.main:app \\\n  --host 0.0.0.0 \\\n  --port 8000 \\\n  --reload\n</code></pre> requirements.txt<pre><code>uvicorn[standard]\nfastapi\nsqlalchemy\npymysql\npydantic[email]\npasslib\npydantic\nrequests\nPyJWT\n</code></pre>"},{"location":"exercicio1/main/#rotas","title":"Rotas:","text":"<p>GET /exchange/{from}/{to}</p> <p>Get the current of a coin from one currency to another. E.g. <code>GET /coin/USD/EUR</code>.</p> Response <p><pre><code>{\n    \"sell\": 0.82,\n    \"buy\": 0.80,\n    \"date\": \"2021-09-01 14:23:42\",\n    \"id-account\": \"0195ae95-5be7-7dd3-b35d-7a7d87c404fb\"\n}\n</code></pre> <pre><code>Response code: 200 (ok)\n</code></pre></p>"},{"location":"exercicio2/main/","title":"Exercicio 2","text":""},{"location":"exercicio2/main/#objetivo","title":"Objetivo","text":"<p>Fazer um microservi\u00e7o de product para nossa api, que interaja com nosso banco de dados e tenha uma dependencia com os objetos utilizados.</p>"},{"location":"exercicio2/main/#montagem-do-exercicio","title":"Montagem do Exercicio","text":"<p>Para a realiza\u00e7ao deste exercicio, precisamos primeiro criar nossa aplica\u00e7\u00e3o e testa-la, uma vez funcionando adicionamos ao compose da API</p>"},{"location":"exercicio2/main/#criacao-exercicio","title":"Cria\u00e7\u00e3o Exercicio","text":"<p>Clone o reposit\u00f3rio com o exercicio pronto para ver a estrutura de arquivos escolhida, mas ela segue uma estrutura springboot padr\u00e3o, diferindo que s\u00e3o dois reposit\u00f3rios. Para testar localmente, use mvn clean install em <code>product</code> para rodar o <code>product-service</code>.</p>"},{"location":"exercicio2/main/#criacao-dockerfile","title":"Cria\u00e7\u00e3o dockerfile","text":"<p>Este dockerfile basicamente faz o compilamento e executa o mesmo. \u00c9 necessario ter o product installado (mvn clean install)</p> product pom.xmlproduct-service pom.xmlproduct-service dockerfile product pom.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.4.2&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;product&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;name&gt;product&lt;/name&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2024.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n            &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;\n            &lt;version&gt;2.18.2&lt;/version&gt; &lt;!-- Use your Jackson version --&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n&lt;/project&gt;\n</code></pre> product pom.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.4.2&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;product-service&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2024.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;store&lt;/groupId&gt;\n            &lt;artifactId&gt;product&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n            &lt;artifactId&gt;flyway-core&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;!-- https://mvnrepository.com/artifact/org.flywaydb/flyway-database-postgresql --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n            &lt;artifactId&gt;flyway-database-postgresql&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- dependency redis e cache --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- dependency prometheus e grafana --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.micrometer&lt;/groupId&gt;\n            &lt;artifactId&gt;micrometer-registry-prometheus&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> dockerfile<pre><code>FROM openjdk:21-slim\nVOLUME /tmp\nCOPY target/*.jar app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n</code></pre>"},{"location":"exercicio2/main/#rotas","title":"Rotas","text":"<p>POST /product</p> <p>Create a new product.</p> RequestResponse <pre><code>{\n    \"name\": \"Tomato\",\n    \"price\": 10.12,\n    \"unit\": \"kg\"\n}\n</code></pre> <p><pre><code>{\n    \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n    \"name\": \"Tomato\",\n    \"price\": 10.12,\n    \"unit\": \"kg\"\n}\n</code></pre> <pre><code>Response code: 201 (created)\n</code></pre></p> <p>GET /product</p> <p>Get all products.</p> Response <p><pre><code>[\n    {\n        \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n        \"name\": \"Tomato\",\n        \"price\": 10.12,\n        \"unit\": \"kg\"\n    },\n    {\n        \"id\": \"0195abfe-e416-7052-be3b-27cdaf12a984\",\n        \"name\": \"Cheese\",\n        \"price\": 0.62,\n        \"unit\": \"slice\"\n    }\n]\n</code></pre> <pre><code>Response code: 200 (ok)\n</code></pre></p> <p>GET /product/{id}</p> <p>Get a product by its ID.</p> Response <p><pre><code>{\n    \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n    \"name\": \"Tomato\",\n    \"price\": 10.12,\n    \"unit\": \"kg\"\n}\n</code></pre> <pre><code>Response code: 200 (ok)\n</code></pre></p> <p>DELETE /product/{id}</p> <p>Delete a product by its ID.</p> <pre><code>Response code: 204 (no content)\n</code></pre>"},{"location":"exercicio3/main/","title":"Exercicio 3","text":""},{"location":"exercicio3/main/#objetivo","title":"Objetivo","text":"<p>Fazer um microservi\u00e7o de order para nossa api, que interaja com nosso banco de dados e tenha uma dependencia com os objetos utilizados.</p>"},{"location":"exercicio3/main/#montagem-do-exercicio","title":"Montagem do Exercicio","text":"<p>Para a realiza\u00e7ao deste exercicio, precisamos primeiro criar nossa aplica\u00e7\u00e3o e testa-la, uma vez funcionando adicionamos ao compose da API</p>"},{"location":"exercicio3/main/#criacao-exercicio","title":"Cria\u00e7\u00e3o Exercicio","text":"<p>Clone o reposit\u00f3rio com o exercicio pronto para ver a estrutura de arquivos escolhida, mas ela segue uma estrutura springboot padr\u00e3o, diferindo que s\u00e3o dois reposit\u00f3rios. Para testar localmente, use mvn clean install em <code>order</code> para rodar o <code>order-service</code>.</p>"},{"location":"exercicio3/main/#criacao-dockerfile","title":"Cria\u00e7\u00e3o dockerfile","text":"<p>Este dockerfile basicamente faz o compilamento e executa o mesmo. \u00c9 necessario ter o order installado (mvn clean install)</p> order pom.xmlorder-service pom.xmlorder-service dockerfile order pom.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.4.2&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;order&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;name&gt;order&lt;/name&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2024.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;store&lt;/groupId&gt;\n            &lt;artifactId&gt;product&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n&lt;/project&gt;\n</code></pre> order pom.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.4.2&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;order-service&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2024.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;store&lt;/groupId&gt;\n            &lt;artifactId&gt;order&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;store&lt;/groupId&gt;\n            &lt;artifactId&gt;account&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;store&lt;/groupId&gt;\n            &lt;artifactId&gt;product&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n            &lt;artifactId&gt;flyway-core&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;!-- https://mvnrepository.com/artifact/org.flywaydb/flyway-database-postgresql --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n            &lt;artifactId&gt;flyway-database-postgresql&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> dockerfile<pre><code>#order-service dockerfile (needs the auto-install)\nFROM openjdk:21-slim\nVOLUME /tmp\nCOPY target/*.jar app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n</code></pre>"},{"location":"exercicio3/main/#rotas","title":"Rotas","text":"<p>POST /order</p> <p>Create a new order.</p> RequestResponse <pre><code>{\n    \"name\": \"Tomato\",\n    \"price\": 10.12,\n    \"unit\": \"kg\"\n}\n</code></pre> <p><pre><code>{\n    \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n    \"name\": \"Tomato\",\n    \"price\": 10.12,\n    \"unit\": \"kg\"\n}\n</code></pre> <pre><code>Response code: 201 (created)\n</code></pre></p> <p>GET /order</p> <p>Get all orders.</p> Response <p><pre><code>[\n    {\n        \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n        \"name\": \"Tomato\",\n        \"price\": 10.12,\n        \"unit\": \"kg\"\n    },\n    {\n        \"id\": \"0195abfe-e416-7052-be3b-27cdaf12a984\",\n        \"name\": \"Cheese\",\n        \"price\": 0.62,\n        \"unit\": \"slice\"\n    }\n]\n</code></pre> <pre><code>Response code: 200 (ok)\n</code></pre></p> <p>POST /order</p> <p>Create a new order for the current user.</p> RequestResponse <pre><code>{\n    \"items\": [\n        {\n            \"idorder\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n            \"quantity\": 2\n        },\n        {\n            \"idorder\": \"0195abfe-e416-7052-be3b-27cdaf12a984\",\n            \"quantity\": 10\n        }\n    ]\n}\n</code></pre> <p><pre><code>{\n    \"id\": \"0195ac33-73e5-7cb3-90ca-7b5e7e549569\",\n    \"date\": \"2025-09-01T12:30:00\",\n    \"items\": [\n        {\n            \"id\": \"01961b9a-bca2-78c4-9be1-7092b261f217\",\n            \"order\": {\n                \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\"\n            },\n            \"quantity\": 2,\n            \"total\": 20.24\n        },\n        {\n            \"id\": \"01961b9b-08fd-76a5-8508-cdb6cd5c27ab\",\n            \"order\": {\n                \"id\": \"0195abfe-e416-7052-be3b-27cdaf12a984\"\n            },\n            \"quantity\": 10,\n            \"total\": 6.2\n        }\n    ],\n    \"total\": 26.44\n}\n</code></pre> <pre><code>Response code: 201 (created)\nResponse code: 400 (bad request), if the order does not exist.\n</code></pre></p> <p>GET /order</p> <p>Get all orders for the current user.</p> Response <p><pre><code>[\n    {\n        \"id\": \"0195ac33-73e5-7cb3-90ca-7b5e7e549569\",\n        \"date\": \"2025-09-01T12:30:00\",\n        \"total\": 26.44\n    },\n    {\n        \"id\": \"0195ac33-cbbd-7a6e-a15b-b85402cf143f\",\n        \"date\": \"2025-10-09T03:21:57\",\n        \"total\": 18.6\n    }\n\n]\n</code></pre> <pre><code>Response code: 200 (ok)\n</code></pre></p> <p>GET /order/{id}</p> <p>Get the order details by its ID. The order must belong to the current user., otherwise, return a <code>404</code>.</p> Response <p><pre><code>{\n    \"id\": \"0195ac33-73e5-7cb3-90ca-7b5e7e549569\",\n    \"date\": \"2025-09-01T12:30:00\",\n    \"items\": [\n        {\n            \"id\": \"01961b9a-bca2-78c4-9be1-7092b261f217\",\n            \"order\": {\n                \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n            },\n            \"quantity\": 2,\n            \"total\": 20.24\n        },\n        {\n            \"id\": \"01961b9b-08fd-76a5-8508-cdb6cd5c27ab\",\n            \"order\": {\n                \"id\": \"0195abfe-e416-7052-be3b-27cdaf12a984\",\n            },\n            \"quantity\": 10,\n            \"total\": 6.2\n        }\n    ],\n    \"total\": 26.44\n}\n</code></pre> <pre><code>Response code: 200 (ok)\nResponse code: 404 (not found), if the order does not belong to the current user.\n</code></pre></p>"},{"location":"exercicio4/main/","title":"Exercicio 4","text":""},{"location":"exercicio4/main/#objetivo","title":"Objetivo","text":"<p>Fazer a automatiza\u00e7\u00e3o do processo de compilar, enviar para o docker hub, puxar a imagem e iniciar os processos com kubernets. Para isso, no exercicio 4 usamos o jenkins para esta primeira fun\u00e7\u00e3o, de monitorar o github para mudan\u00e7as e, ao detecta-las, fazer uma nova build para nosso docker hub.</p>"},{"location":"exercicio4/main/#montagem-do-exercicio","title":"Montagem do Exercicio","text":"<p>Para a realiza\u00e7ao deste exercicio, precisamos criar um jenkins file em todos os nossos microservi\u00e7os, ele que sera responsavel por instruir o jenkins quais passos devem ser seguidos para compilar com sucesso nosso programa e gerar o docker. Tambem \u00e9 ele que acaba lidando com dependencias de diferentes m\u00f3dulos (como product para o product-service), extraindo a dependencia de nosso rep no github.</p>"},{"location":"exercicio4/main/#jenkinsfiles","title":"Jenkinsfiles","text":"<p>Jenkinsfile que instrui a execu\u00e7\u00e3o de cada processo para nosso jenkins principal (todas as variaveis de hambiente s\u00e3o definidas no pr\u00f3prio Jenkins, e n\u00e3o em um .env)</p> account-service Jenkinsorder-service Jenkinsaccount-service Jenkinsauth-service Jenkinsexchange-service Jenkinsgateway-service Jenkins Jenkinsfile<pre><code>// Account-service: jenkins\npipeline {\n    agent any\n\n    tools {\n        maven 'maven-3'\n        jdk 'jdk-21'\n    }\n\n    environment {\n        SERVICE = 'account'\n        NAME = \"joaopgs4/${env.SERVICE}\"\n        REGISTRY_CREDENTIALS = 'dockerhub-credentials'\n    }\n\n    stages {\n        stage('Checkout Dependencies') {\n            steps {\n                script {\n                    dir('libs/account') {\n                        git branch: 'main', url: 'https://github.com/joaopgs4/account.git'\n                        sh 'mvn clean install -DskipTests'\n                    }\n                }\n            }\n        }\n\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n\n        stage('Build &amp; Push Image') {\n            steps {\n                script {\n                    withCredentials([usernamePassword(credentialsId: env.REGISTRY_CREDENTIALS, \n                                                   usernameVariable: 'USERNAME', \n                                                   passwordVariable: 'TOKEN')]) {\n                        sh \"\"\"\n                            docker login -u \\$USERNAME -p \\$TOKEN\n                            docker build -t ${env.NAME}:latest .\n                            docker build -t ${env.NAME}:${env.BUILD_NUMBER} .\n                            docker push ${env.NAME}:latest\n                            docker push ${env.NAME}:${env.BUILD_NUMBER}\n                        \"\"\"\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre> Jenkinsfile<pre><code>// order-service: jenkins\npipeline {\n    agent any\n\n    tools {\n        maven 'maven-3'\n        jdk 'jdk-21'\n    }\n\n    environment {\n        SERVICE = 'order'\n        NAME = \"joaopgs4/${env.SERVICE}\"\n        REGISTRY_CREDENTIALS = 'dockerhub-credentials'\n    }\n\n    stages {\n        stage('Checkout Dependencies') {\n            steps {\n                script {\n                    dir('libs/order') {\n                        git branch: 'main', url: 'https://github.com/joaopgs4/order.git'\n                        sh 'mvn clean install -DskipTests'\n                    }\n                    dir('libs/product') {\n                        git branch: 'main', url: 'https://github.com/joaopgs4/product.git'\n                        sh 'mvn clean install -DskipTests'\n                    }\n                }\n            }\n        }\n\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n\n        stage('Build &amp; Push Docker Image') {\n            steps {\n                script {\n                    withCredentials([usernamePassword(credentialsId: env.REGISTRY_CREDENTIALS, \n                                                   usernameVariable: 'USERNAME', \n                                                   passwordVariable: 'TOKEN')]) {\n                        sh \"\"\"\n                            docker login -u \\$USERNAME -p \\$TOKEN\n                            docker build -t ${env.NAME}:latest .\n                            docker build -t ${env.NAME}:${env.BUILD_NUMBER} .\n                            docker push ${env.NAME}:latest\n                            docker push ${env.NAME}:${env.BUILD_NUMBER}\n                        \"\"\"\n                    }\n                }\n                }\n            }\n        }\n}\n</code></pre> Jenkinsfile<pre><code>// Account-service: jenkins\npipeline {\n    agent any\n\n    tools {\n        maven 'maven-3'\n        jdk 'jdk-21'\n    }\n\n    environment {\n        SERVICE = 'account'\n        NAME = \"joaopgs4/${env.SERVICE}\"\n        REGISTRY_CREDENTIALS = 'dockerhub-credentials'\n    }\n\n    stages {\n        stage('Checkout Dependencies') {\n            steps {\n                script {\n                    dir('libs/account') {\n                        git branch: 'main', url: 'https://github.com/joaopgs4/account.git'\n                        sh 'mvn clean install -DskipTests'\n                    }\n                }\n            }\n        }\n\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n\n        stage('Build &amp; Push Image') {\n            steps {\n                script {\n                    withCredentials([usernamePassword(credentialsId: env.REGISTRY_CREDENTIALS, \n                                                   usernameVariable: 'USERNAME', \n                                                   passwordVariable: 'TOKEN')]) {\n                        sh \"\"\"\n                            docker login -u \\$USERNAME -p \\$TOKEN\n                            docker build -t ${env.NAME}:latest .\n                            docker build -t ${env.NAME}:${env.BUILD_NUMBER} .\n                            docker push ${env.NAME}:latest\n                            docker push ${env.NAME}:${env.BUILD_NUMBER}\n                        \"\"\"\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre> Jenkinsfile<pre><code>// auth-service Jenkinsfile\npipeline {\n    agent any\n\n    tools {\n        maven 'maven-3'\n        jdk 'jdk-21'\n    }\n\n    environment {\n        SERVICE = 'auth'\n        NAME = \"joaopgs4/${env.SERVICE}\"\n        REGISTRY_CREDENTIALS = 'dockerhub-credentials'\n    }\n\n    stages {\n        stage('Checkout Dependencies') {\n            steps {\n                script {\n                    dir('libs/account') {\n                        git branch: 'main', url: 'https://github.com/joaopgs4/account.git'\n                        sh 'mvn clean install -DskipTests'\n                    }\n\n                    dir('libs/auth') {\n                        git branch: 'main', url: 'https://github.com/joaopgs4/auth.git'\n                        sh 'mvn clean install -DskipTests'\n                    }\n                }\n            }\n        }\n\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n\n        stage('Build &amp; Push Docker Image') {\n            steps {\n                script {\n                    withCredentials([usernamePassword(credentialsId: env.REGISTRY_CREDENTIALS, \n                                                   usernameVariable: 'USERNAME', \n                                                   passwordVariable: 'TOKEN')]) {\n                        sh \"\"\"\n                            docker login -u \\$USERNAME -p \\$TOKEN\n                            docker build -t ${env.NAME}:latest .\n                            docker build -t ${env.NAME}:${env.BUILD_NUMBER} .\n                            docker push ${env.NAME}:latest\n                            docker push ${env.NAME}:${env.BUILD_NUMBER}\n                        \"\"\"\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre> Jenkinsfile<pre><code>// exchange-service: Jenkinsfile\npipeline {\n    agent any\n\n    environment {\n        SERVICE = 'exchange'\n        NAME = \"joaopgs4/${env.SERVICE}\"\n        REGISTRY_CREDENTIALS = 'dockerhub-credentials'\n    }\n\n    stages {    \n        stage('Build &amp; Push Docker Image') {\n            steps {\n                script {\n                    withCredentials([usernamePassword(credentialsId: env.REGISTRY_CREDENTIALS, \n                                                   usernameVariable: 'USERNAME', \n                                                   passwordVariable: 'TOKEN')]) {\n                        sh \"\"\"\n                            docker login -u \\$USERNAME -p \\$TOKEN\n                            docker build -t ${env.NAME}:latest .\n                            docker build -t ${env.NAME}:${env.BUILD_NUMBER} .\n                            docker push ${env.NAME}:latest\n                            docker push ${env.NAME}:${env.BUILD_NUMBER}\n                        \"\"\"\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre> Jenkinsfile<pre><code>// gateway-service: Jenkinsfile\npipeline {\n    agent any\n\n    tools {\n        maven 'maven-3'\n        jdk 'jdk-21'\n    }\n\n    environment {\n        SERVICE = 'gateway'\n        NAME = \"joaopgs4/${env.SERVICE}\"\n        REGISTRY_CREDENTIALS = 'dockerhub-credentials'\n    }\n\n    stages {\n        stage('Checkout Dependencies') {\n            steps {\n                script {\n                    dir('libs/auth') {\n                        git branch: 'main', url: 'https://github.com/joaopgs4/auth.git'\n                        sh 'mvn clean install -DskipTests'\n                    }\n\n                    dir('libs/account') {\n                        git branch: 'main', url: 'https://github.com/joaopgs4/account.git'\n                        sh 'mvn clean install -DskipTests'\n                    }\n                }\n            }\n        }\n\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n\n        stage('Build &amp; Push Docker Image') {\n            steps {\n                script {\n                    withCredentials([usernamePassword(credentialsId: env.REGISTRY_CREDENTIALS, \n                                                   usernameVariable: 'USERNAME', \n                                                   passwordVariable: 'TOKEN')]) {\n                        sh \"\"\"\n                            docker login -u \\$USERNAME -p \\$TOKEN\n                            docker build -t ${env.NAME}:latest .\n                            docker build -t ${env.NAME}:${env.BUILD_NUMBER} .\n                            docker push ${env.NAME}:latest\n                            docker push ${env.NAME}:${env.BUILD_NUMBER}\n                        \"\"\"\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"exercicio4/main/#imagens","title":"Imagens","text":""},{"location":"exercicio5/main/","title":"Exercicio 5","text":""},{"location":"exercicio5/main/#objetivo","title":"Objetivo","text":"<p>Fazer a automatiza\u00e7\u00e3o do processo de compilar, enviar para o docker hub, puxar a imagem e iniciar os processos com kubernets. Este exercicio 5 cuida desta segunda parte, sendo ela justamente o deploy com pull automatico do dockerhub utilizando Kubernets (ou no nosso caso, minikube)</p>"},{"location":"exercicio5/main/#montagem-do-exercicio","title":"Montagem do Exercicio","text":"<p>Para a realiza\u00e7ao deste exercicio, precisamos criar um k8s.yaml para todos os microservi\u00e7os. Este \u00e9 basicamente um dockerfile especial que explica para o kubernet como iniciar ele para funcionar em conjunto aos outros microservi\u00e7os.</p>"},{"location":"exercicio5/main/#k8s","title":"k8s","text":"<p>Os arquivos .yaml que definem como executar as aplica\u00e7\u00f5es e dar pull em seus respectivos containers</p> account-service k8s.yamlorder-service k8s.yamlaccount-service k8s.yamlauth-service k8s.yamlexchange-service k8s.yamlgateway-service k8s.yamldb k8s k8s.yaml<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: account\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: account\n  template:\n    metadata:\n      labels:\n        app: account\n    spec:\n      containers:\n      - name: account\n        image: joaopgs4/account:latest\n        imagePullPolicy: Always\n        ports:\n        - containerPort: 8080\n        env:\n        - name: DATABASE_HOST\n          value: \"db-service\"\n        - name: DATABASE_USER\n          value: \"store\"\n        - name: DATABASE_PASSWORD\n          value: \"store\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: account\nspec:\n  selector:\n    app: account\n  ports:\n  - protocol: TCP\n    port: 8080\n    targetPort: 8080\n  type: ClusterIP\n</code></pre> k8s.yaml<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: order\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: order\n  template:\n    metadata:\n      labels:\n        app: order\n    spec:\n      containers:\n      - name: order\n        image: joaopgs4/order:latest\n        imagePullPolicy: Always\n        ports:\n        - containerPort: 8080\n        env:\n        - name: DATABASE_HOST\n          value: \"db-service\"\n        - name: DATABASE_USER\n          value: \"store\"\n        - name: DATABASE_PASSWORD\n          value: \"store\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: order\nspec:\n  selector:\n    app: order\n  ports:\n  - protocol: TCP\n    port: 8080\n    targetPort: 8080\n  type: ClusterIP\n</code></pre> k8s.yaml<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: account\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: account\n  template:\n    metadata:\n      labels:\n        app: account\n    spec:\n      containers:\n      - name: account\n        image: joaopgs4/account:latest\n        imagePullPolicy: Always\n        ports:\n        - containerPort: 8080\n        env:\n        - name: DATABASE_HOST\n          value: \"db-service\"\n        - name: DATABASE_USER\n          value: \"store\"\n        - name: DATABASE_PASSWORD\n          value: \"store\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: account\nspec:\n  selector:\n    app: account\n  ports:\n  - protocol: TCP\n    port: 8080\n    targetPort: 8080\n  type: ClusterIP\n</code></pre> k8s.yaml<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: auth\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: auth\n  template:\n    metadata:\n      labels:\n        app: auth\n    spec:\n      containers:\n      - name: auth\n        image: joaopgs4/auth:latest\n        imagePullPolicy: Always\n        ports:\n        - containerPort: 8080\n        env:\n        - name: JWT_SECRET_KEY\n          value: \"yrBBgYlvJQeslzFlgX9MFZccToI2fjRFqualquercoisa\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: auth\nspec:\n  selector:\n    app: auth\n  ports:\n  - protocol: TCP\n    port: 8080\n    targetPort: 8080\n  type: ClusterIP\n</code></pre> k8s.yaml<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: exchange\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: exchange\n  template:\n    metadata:\n      labels:\n        app: exchange\n    spec:\n      containers:\n      - name: exchange\n        image: joaopgs4/exchange:latest\n        imagePullPolicy: Always\n        ports:\n        - containerPort: 8000\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: exchange\nspec:\n  selector:\n    app: exchange\n  ports:\n  - protocol: TCP\n    port: 8000\n    targetPort: 8000\n  type: ClusterIP\n</code></pre> k8s.yaml<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: gateway\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: gateway\n  template:\n    metadata:\n      labels:\n        app: gateway\n    spec:\n      containers:\n      - name: gateway\n        image: joaopgs4/gateway:latest\n        imagePullPolicy: Always\n        ports:\n        - containerPort: 8080\n        env:\n        - name: LOGGING_LEVEL_STORE\n          value: \"debug\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: gateway\nspec:\n  selector:\n    app: gateway\n  ports:\n  - protocol: TCP\n    port: 8080\n    targetPort: 8080\n  type: NodePort\n</code></pre> db.yaml<pre><code>apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: postgres-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: postgres-secret\ntype: Opaque\ndata:\n  POSTGRES_DB: c3RvcmU=          # store (base64)\n  POSTGRES_USER: c3RvcmU=        # store (base64)\n  POSTGRES_PASSWORD: c3RvcmU=    # store (base64)\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:latest\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: POSTGRES_DB\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: POSTGRES_USER\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: POSTGRES_PASSWORD\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: db-service\nspec:\n  selector:\n    app: postgres\n  ports:\n    - protocol: TCP\n      port: 5432\n      targetPort: 5432\n  type: ClusterIP\n</code></pre>"},{"location":"exercicio5/main/#imagens","title":"Imagens","text":""}]}